<?php 
/**
	Admin Page Framework v3.8.10 by Michael Uno 
	Generated by PHP Class Files Script Generator <https://github.com/michaeluno/PHP-Class-Files-Script-Generator>
	<http://en.michaeluno.jp/wp-favorite-posts>
	Copyright (c) 2013-2016, Michael Uno; Licensed under MIT <http://opensource.org/licenses/MIT> */
abstract class WPFavoritePostsAdminPageFramework_Form_View___Fieldset_Base extends WPFavoritePostsAdminPageFramework_Form_Utility {
    public $aFieldset = array();
    public $aFieldTypeDefinitions = array();
    public $aOptions = array();
    public $aErrors = array();
    public $oMsg;
    public $aCallbacks = array();
    public function __construct($aFieldset, $aOptions, $aErrors, &$aFieldTypeDefinitions, &$oMsg, array $aCallbacks = array()) {
        $this->aFieldset = $this->_getFormatted($aFieldset, $aFieldTypeDefinitions);
        $this->aFieldTypeDefinitions = $aFieldTypeDefinitions;
        $this->aOptions = $aOptions;
        $this->aErrors = $this->getAsArray($aErrors);
        $this->oMsg = $oMsg;
        $this->aCallbacks = $aCallbacks + array('hfID' => null, 'hfTagID' => null, 'hfName' => null, 'hfNameFlat' => null, 'hfInputName' => null, 'hfInputNameFlat' => null, 'hfClass' => null,);
        $this->_loadScripts($this->aFieldset['_structure_type']);
    }
    private function _getFormatted($aFieldset, $aFieldTypeDefinitions) {
        return $this->uniteArrays($aFieldset, $this->_getFieldTypeDefaultArguments($aFieldset['type'], $aFieldTypeDefinitions) + WPFavoritePostsAdminPageFramework_Form_Model___Format_Fieldset::$aStructure);
    }
    private function _getFieldTypeDefaultArguments($sFieldType, $aFieldTypeDefinitions) {
        $_aFieldTypeDefinition = $this->getElement($aFieldTypeDefinitions, $sFieldType, $aFieldTypeDefinitions['default']);
        $_aDefaultKeys = $this->getAsArray($_aFieldTypeDefinition['aDefaultKeys']);
        $_aDefaultKeys['attributes'] = array('fieldrow' => $_aDefaultKeys['attributes']['fieldrow'], 'fieldset' => $_aDefaultKeys['attributes']['fieldset'], 'fields' => $_aDefaultKeys['attributes']['fields'], 'field' => $_aDefaultKeys['attributes']['field'],);
        return $_aDefaultKeys;
    }
    static private $_bIsLoadedJSScripts = false;
    static private $_bIsLoadedJSScripts_Widget = false;
    private function _loadScripts($sStructureType = '') {
        if ('widget' === $sStructureType && !self::$_bIsLoadedJSScripts_Widget) {
            new WPFavoritePostsAdminPageFramework_Form_View___Script_Widget;
            self::$_bIsLoadedJSScripts_Widget = true;
        }
        if (self::$_bIsLoadedJSScripts) {
            return;
        }
        self::$_bIsLoadedJSScripts = true;
        new WPFavoritePostsAdminPageFramework_Form_View___Script_Utility;
        new WPFavoritePostsAdminPageFramework_Form_View___Script_OptionStorage;
        new WPFavoritePostsAdminPageFramework_Form_View___Script_AttributeUpdator;
        new WPFavoritePostsAdminPageFramework_Form_View___Script_RepeatableField($this->oMsg);
        new WPFavoritePostsAdminPageFramework_Form_View___Script_SortableField;
    }
    protected function _getRepeaterFieldEnablerScript($sFieldsContainerID, $iFieldCount, $aSettings) {
        $_sSmallButtons = '"' . $this->_getRepeatableButtonHTML($sFieldsContainerID, ( array )$aSettings, $iFieldCount, true) . '"';
        $_sNestedFieldsButtons = '"' . $this->_getRepeatableButtonHTML($sFieldsContainerID, ( array )$aSettings, $iFieldCount, false) . '"';
        $_aJSArray = json_encode($aSettings);
        $_sScript = <<<JAVASCRIPTS
jQuery( document ).ready( function() {
    var _oButtonPlaceHolders = jQuery( '#{$sFieldsContainerID} > .wp-favorite-posts-field.without-child-fields .repeatable-field-buttons' );
    /* If the button place-holder is set in the field type definition, replace it with the created output */
    if ( _oButtonPlaceHolders.length > 0 ) {
        _oButtonPlaceHolders.replaceWith( $_sSmallButtons );
    } 
    /* Otherwise, insert the button element at the beginning of the field tag */
    else { 
        /**
         * Adds the buttons
         * Check whether the button container already exists for WordPress 3.5.1 or below.
         * @todo 3.8.0 Examine the below conditional line whether the behavior does not break for nested fields.
         */
        if ( ! jQuery( '#{$sFieldsContainerID} .wp-favorite-posts-repeatable-field-buttons' ).length ) { 
            jQuery( '#{$sFieldsContainerID} > .wp-favorite-posts-field.without-nested-fields' ).prepend( $_sSmallButtons );
        }
        /**
         * Support for nested fields.
         * For nested fields, add the buttons to the fields tag.
         */
        jQuery( '#{$sFieldsContainerID} > .wp-favorite-posts-field.with-nested-fields' ).prepend( $_sNestedFieldsButtons );
        
        /**
         * Support for inline mixed fields.
         */
        // jQuery( '#{$sFieldsContainerID} > .wp-favorite-posts-field.with-mixed-fields' ).prepend( $_sNestedFieldsButtons );
        
    }     
    jQuery( '#{$sFieldsContainerID}' ).updateWPFavoritePostsAdminPageFrameworkRepeatableFields( $_aJSArray ); // Update the fields     
});
JAVASCRIPTS;
        return "<script type='text/javascript'>" . '/* <![CDATA[ */' . $_sScript . '/* ]]> */' . "</script>";
    }
    private function _getRepeatableButtonHTML($sFieldsContainerID, array $aSettings, $iFieldCount, $bSmall = true) {
        $_sAdd = $this->oMsg->get('add');
        $_sRemove = $this->oMsg->get('remove');
        $_sVisibility = $iFieldCount <= 1 ? " style='visibility: hidden;'" : "";
        $_sSettingsAttributes = $this->generateDataAttributes($aSettings);
        $_sSmallButtonSelector = $bSmall ? ' button-small' : '';
        $_bDashiconSupported = false;
        $_sDashiconPlus = '';
        $_sDashiconMinus = '';
        return "<div class='wp-favorite-posts-repeatable-field-buttons' {$_sSettingsAttributes} >" . "<a class='repeatable-field-remove-button button-secondary repeatable-field-button button {$_sSmallButtonSelector}{$_sDashiconMinus}' href='#' title='{$_sRemove}' {$_sVisibility} data-id='{$sFieldsContainerID}'>" . '-' . "</a>" . "<a class='repeatable-field-add-button button-secondary repeatable-field-button button {$_sSmallButtonSelector}{$_sDashiconPlus}' href='#' title='{$_sAdd}' data-id='{$sFieldsContainerID}'>" . '+' . "</a>" . "</div>";
    }
    protected function _getSortableFieldEnablerScript($sFieldsContainerID) {
        $_sScript = <<<JAVASCRIPTS
    jQuery( document ).ready( function() {
        jQuery( this ).enableWPFavoritePostsAdminPageFrameworkSortableFields( '$sFieldsContainerID' );
    });
JAVASCRIPTS;
        return "<script type='text/javascript' class='wp-favorite-posts-sortable-field-enabler-script'>" . '/* <![CDATA[ */' . $_sScript . '/* ]]> */' . "</script>";
    }
}
class WPFavoritePostsAdminPageFramework_Form_View___Fieldset extends WPFavoritePostsAdminPageFramework_Form_View___Fieldset_Base {
    public function get() {
        $_aOutputs = array();
        $_oFieldError = new WPFavoritePostsAdminPageFramework_Form_View___Fieldset___FieldError($this->aErrors, $this->aFieldset['_section_path_array'], $this->aFieldset['_field_path_array'], $this->aFieldset['error_message']);
        $_aOutputs[] = $_oFieldError->get();
        $_oFieldsFormatter = new WPFavoritePostsAdminPageFramework_Form_Model___Format_Fields($this->aFieldset, $this->aOptions);
        $_aFields = $_oFieldsFormatter->get();
        $_aOutputs[] = $this->_getFieldsOutput($this->aFieldset, $_aFields, $this->aCallbacks);
        return $this->_getFinalOutput($this->aFieldset, $_aOutputs, count($_aFields));
    }
    private function _getFieldsOutput(array $aFieldset, array $aFields, array $aCallbacks = array()) {
        $_aOutput = array();
        foreach ($aFields as $_isIndex => $_aField) {
            $_aOutput[] = $this->_getEachFieldOutput($_aField, $_isIndex, $aCallbacks, $this->isLastElement($aFields, $_isIndex));
        }
        return implode(PHP_EOL, array_filter($_aOutput));
    }
    private function _getEachFieldOutput(array $aField, $isIndex, array $aCallbacks, $bIsLastElement = false) {
        $_aFieldTypeDefinition = $this->_getFieldTypeDefinition($aField['type']);
        if (!is_callable($_aFieldTypeDefinition['hfRenderField'])) {
            return '';
        }
        $_oSubFieldFormatter = new WPFavoritePostsAdminPageFramework_Form_Model___Format_EachField($aField, $isIndex, $aCallbacks, $_aFieldTypeDefinition);
        $aField = $_oSubFieldFormatter->get();
        return $this->_getFieldOutput(call_user_func_array($_aFieldTypeDefinition['hfRenderField'], array($aField)), $aField, $bIsLastElement);
    }
    private function _getFieldOutput($sContent, array $aField, $bIsLastElement) {
        $_oFieldAttribute = new WPFavoritePostsAdminPageFramework_Form_View___Attribute_Field($aField);
        return $aField['before_field'] . "<div " . $_oFieldAttribute->get() . ">" . $sContent . $this->_getUnsetFlagFieldInputTag($aField) . $this->_getDelimiter($aField, $bIsLastElement) . "</div>" . $aField['after_field'];
    }
    private function _getUnsetFlagFieldInputTag(array $aField) {
        if (false !== $aField['save']) {
            return '';
        }
        return $this->getHTMLTag('input', array('type' => 'hidden', 'name' => '__unset_' . $aField['_fields_type'] . '[' . $aField['_input_name_flat'] . ']', 'value' => $aField['_input_name_flat'], 'class' => 'unset-element-names element-address',));
    }
    private function _getFieldTypeDefinition($sFieldTypeSlug) {
        return $this->getElement($this->aFieldTypeDefinitions, $sFieldTypeSlug, $this->aFieldTypeDefinitions['default']);
    }
    private function _getDelimiter(array $aField, $bIsLastElement) {
        return $aField['delimiter'] ? "<div " . $this->getAttributes(array('class' => 'delimiter', 'id' => "delimiter-{$aField['input_id']}", 'style' => $this->getAOrB($bIsLastElement, "display:none;", ""),)) . ">" . $aField['delimiter'] . "</div>" : '';
    }
    private function _getFinalOutput(array $aFieldset, array $aFieldsOutput, $iFieldsCount) {
        $_oFieldsetAttributes = new WPFavoritePostsAdminPageFramework_Form_View___Attribute_Fieldset($aFieldset);
        return $aFieldset['before_fieldset'] . "<fieldset " . $_oFieldsetAttributes->get() . ">" . $this->_getEmbeddedFieldTitle($aFieldset) . $this->_getChildFieldTitle($aFieldset) . $this->_getFieldsetContent($aFieldset, $aFieldsOutput, $iFieldsCount) . $this->_getExtras($aFieldset, $iFieldsCount) . "</fieldset>" . $aFieldset['after_fieldset'];
    }
    private function _getEmbeddedFieldTitle(array $aFieldset) {
        if (!$aFieldset['_is_title_embedded']) {
            return '';
        }
        $_oFieldTitle = new WPFavoritePostsAdminPageFramework_Form_View___FieldTitle($aFieldset, '', $this->aOptions, $this->aErrors, $this->aFieldTypeDefinitions, $this->aCallbacks, $this->oMsg);
        return $_oFieldTitle->get();
    }
    private function _getChildFieldTitle(array $aFieldset) {
        if (!$aFieldset['_nested_depth']) {
            return '';
        }
        if ($aFieldset['_is_title_embedded']) {
            return '';
        }
        $_oFieldTitle = new WPFavoritePostsAdminPageFramework_Form_View___FieldTitle($aFieldset, array('wp-favorite-posts-child-field-title'), $this->aOptions, $this->aErrors, $this->aFieldTypeDefinitions, $this->aCallbacks, $this->oMsg);
        return $_oFieldTitle->get();
    }
    private function _getFieldsetContent($aFieldset, $aFieldsOutput, $iFieldsCount) {
        if (is_scalar($aFieldset['content'])) {
            return $aFieldset['content'];
        }
        $_oFieldsAttributes = new WPFavoritePostsAdminPageFramework_Form_View___Attribute_Fields($aFieldset, array(), $iFieldsCount);
        return "<div " . $_oFieldsAttributes->get() . ">" . $aFieldset['before_fields'] . implode(PHP_EOL, $aFieldsOutput) . $aFieldset['after_fields'] . "</div>";
    }
    private function _getExtras($aField, $iFieldsCount) {
        $_aOutput = array();
        $_oFieldDescription = new WPFavoritePostsAdminPageFramework_Form_View___Description($aField['description'], 'wp-favorite-posts-fields-description');
        $_aOutput[] = $_oFieldDescription->get();
        $_aOutput[] = $this->_getDynamicElementFlagFieldInputTag($aField);
        $_aOutput[] = $this->_getFieldScripts($aField, $iFieldsCount);
        return implode(PHP_EOL, array_filter($_aOutput));
    }
    private function _getDynamicElementFlagFieldInputTag(array $aFieldset) {
        if ($aFieldset['repeatable']) {
            return $this->_getRepeatableFieldFlagTag($aFieldset);
        }
        if ($aFieldset['sortable']) {
            return $this->_getSortableFieldFlagTag($aFieldset);
        }
        return '';
    }
    private function _getRepeatableFieldFlagTag(array $aFieldset) {
        return $this->getHTMLTag('input', array('type' => 'hidden', 'name' => '__repeatable_elements_' . $aFieldset['_structure_type'] . '[' . $aFieldset['_field_address'] . ']', 'class' => 'element-address', 'value' => $aFieldset['_field_address'], 'data-field_address_model' => $aFieldset['_field_address_model'],));
    }
    private function _getSortableFieldFlagTag(array $aFieldset) {
        return $this->getHTMLTag('input', array('type' => 'hidden', 'name' => '__sortable_elements_' . $aFieldset['_structure_type'] . '[' . $aFieldset['_field_address'] . ']', 'class' => 'element-address', 'value' => $aFieldset['_field_address'], 'data-field_address_model' => $aFieldset['_field_address_model'],));
    }
    private function _getFieldScripts($aField, $iFieldsCount) {
        $_aOutput = array();
        $_aOutput[] = $aField['repeatable'] ? $this->_getRepeaterFieldEnablerScript('fields-' . $aField['tag_id'], $iFieldsCount, $aField['repeatable']) : '';
        $_aOutput[] = $aField['sortable'] && ($iFieldsCount > 1 || $aField['repeatable']) ? $this->_getSortableFieldEnablerScript('fields-' . $aField['tag_id']) : '';
        return implode(PHP_EOL, $_aOutput);
    }
}
